// Code generated by MockGen. DO NOT EDIT.
// Source: one\contract\i-io-file.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIIOFile is a mock of IIOFile interface.
type MockIIOFile struct {
	ctrl     *gomock.Controller
	recorder *MockIIOFileMockRecorder
}

// MockIIOFileMockRecorder is the mock recorder for MockIIOFile.
type MockIIOFileMockRecorder struct {
	mock *MockIIOFile
}

// NewMockIIOFile creates a new mock instance.
func NewMockIIOFile(ctrl *gomock.Controller) *MockIIOFile {
	mock := &MockIIOFile{ctrl: ctrl}
	mock.recorder = &MockIIOFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIOFile) EXPECT() *MockIIOFileMockRecorder {
	return m.recorder
}

// GetExt mocks base method.
func (m *MockIIOFile) GetExt() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExt")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExt indicates an expected call of GetExt.
func (mr *MockIIOFileMockRecorder) GetExt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExt", reflect.TypeOf((*MockIIOFile)(nil).GetExt))
}

// GetName mocks base method.
func (m *MockIIOFile) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockIIOFileMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIIOFile)(nil).GetName))
}

// GetParent mocks base method.
func (m *MockIIOFile) GetParent() IIODirectory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParent")
	ret0, _ := ret[0].(IIODirectory)
	return ret0
}

// GetParent indicates an expected call of GetParent.
func (mr *MockIIOFileMockRecorder) GetParent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParent", reflect.TypeOf((*MockIIOFile)(nil).GetParent))
}

// GetPath mocks base method.
func (m *MockIIOFile) GetPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath.
func (mr *MockIIOFileMockRecorder) GetPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockIIOFile)(nil).GetPath))
}

// IsExist mocks base method.
func (m *MockIIOFile) IsExist() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExist indicates an expected call of IsExist.
func (mr *MockIIOFileMockRecorder) IsExist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockIIOFile)(nil).IsExist))
}

// Read mocks base method.
func (m *MockIIOFile) Read(data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockIIOFileMockRecorder) Read(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIIOFile)(nil).Read), data)
}

// Write mocks base method.
func (m *MockIIOFile) Write(data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockIIOFileMockRecorder) Write(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockIIOFile)(nil).Write), data)
}
