// Code generated by MockGen. DO NOT EDIT.
// Source: one\contract\i-io-path.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIIOPath is a mock of IIOPath interface.
type MockIIOPath struct {
	ctrl     *gomock.Controller
	recorder *MockIIOPathMockRecorder
}

// MockIIOPathMockRecorder is the mock recorder for MockIIOPath.
type MockIIOPathMockRecorder struct {
	mock *MockIIOPath
}

// NewMockIIOPath creates a new mock instance.
func NewMockIIOPath(ctrl *gomock.Controller) *MockIIOPath {
	mock := &MockIIOPath{ctrl: ctrl}
	mock.recorder = &MockIIOPathMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIOPath) EXPECT() *MockIIOPathMockRecorder {
	return m.recorder
}

// GetRoot mocks base method.
func (m *MockIIOPath) GetRoot() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoot")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRoot indicates an expected call of GetRoot.
func (mr *MockIIOPathMockRecorder) GetRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoot", reflect.TypeOf((*MockIIOPath)(nil).GetRoot))
}

// Join mocks base method.
func (m *MockIIOPath) Join(paths ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range paths {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockIIOPathMockRecorder) Join(paths ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockIIOPath)(nil).Join), paths...)
}
