// Code generated by MockGen. DO NOT EDIT.
// Source: hide-ctx\contract\i-api-factory.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIApiFactory is a mock of IApiFactory interface.
type MockIApiFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIApiFactoryMockRecorder
}

// MockIApiFactoryMockRecorder is the mock recorder for MockIApiFactory.
type MockIApiFactoryMockRecorder struct {
	mock *MockIApiFactory
}

// NewMockIApiFactory creates a new mock instance.
func NewMockIApiFactory(ctrl *gomock.Controller) *MockIApiFactory {
	mock := &MockIApiFactory{ctrl: ctrl}
	mock.recorder = &MockIApiFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIApiFactory) EXPECT() *MockIApiFactoryMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockIApiFactory) Build(endpoint, apiName string) IApi {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", endpoint, apiName)
	ret0, _ := ret[0].(IApi)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockIApiFactoryMockRecorder) Build(endpoint, apiName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockIApiFactory)(nil).Build), endpoint, apiName)
}

// Register mocks base method.
func (m *MockIApiFactory) Register(endpoint, apiName string, apiInstance IApi) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", endpoint, apiName, apiInstance)
}

// Register indicates an expected call of Register.
func (mr *MockIApiFactoryMockRecorder) Register(endpoint, apiName, apiInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIApiFactory)(nil).Register), endpoint, apiName, apiInstance)
}
