// Code generated by MockGen. DO NOT EDIT.
// Source: hide-ctx\contract\i-error.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	errorcode "github.com/ahl5esoft/go-skill/hide-ctx/model/enum/error-code"
	gomock "github.com/golang/mock/gomock"
)

// MockIError is a mock of IError interface.
type MockIError struct {
	ctrl     *gomock.Controller
	recorder *MockIErrorMockRecorder
}

// MockIErrorMockRecorder is the mock recorder for MockIError.
type MockIErrorMockRecorder struct {
	mock *MockIError
}

// NewMockIError creates a new mock instance.
func NewMockIError(ctrl *gomock.Controller) *MockIError {
	mock := &MockIError{ctrl: ctrl}
	mock.recorder = &MockIErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIError) EXPECT() *MockIErrorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockIError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockIErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockIError)(nil).Error))
}

// GetCode mocks base method.
func (m *MockIError) GetCode() errorcode.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode")
	ret0, _ := ret[0].(errorcode.Value)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockIErrorMockRecorder) GetCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockIError)(nil).GetCode))
}

// GetData mocks base method.
func (m *MockIError) GetData() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetData indicates an expected call of GetData.
func (mr *MockIErrorMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockIError)(nil).GetData))
}
