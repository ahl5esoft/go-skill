// Code generated by MockGen. DO NOT EDIT.
// Source: hide-ctx\contract\i-io-directory.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIIODirectory is a mock of IIODirectory interface.
type MockIIODirectory struct {
	ctrl     *gomock.Controller
	recorder *MockIIODirectoryMockRecorder
}

// MockIIODirectoryMockRecorder is the mock recorder for MockIIODirectory.
type MockIIODirectoryMockRecorder struct {
	mock *MockIIODirectory
}

// NewMockIIODirectory creates a new mock instance.
func NewMockIIODirectory(ctrl *gomock.Controller) *MockIIODirectory {
	mock := &MockIIODirectory{ctrl: ctrl}
	mock.recorder = &MockIIODirectoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIODirectory) EXPECT() *MockIIODirectoryMockRecorder {
	return m.recorder
}

// FindDirectories mocks base method.
func (m *MockIIODirectory) FindDirectories() []IIODirectory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDirectories")
	ret0, _ := ret[0].([]IIODirectory)
	return ret0
}

// FindDirectories indicates an expected call of FindDirectories.
func (mr *MockIIODirectoryMockRecorder) FindDirectories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDirectories", reflect.TypeOf((*MockIIODirectory)(nil).FindDirectories))
}

// FindFiles mocks base method.
func (m *MockIIODirectory) FindFiles() []IIOFile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFiles")
	ret0, _ := ret[0].([]IIOFile)
	return ret0
}

// FindFiles indicates an expected call of FindFiles.
func (mr *MockIIODirectoryMockRecorder) FindFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFiles", reflect.TypeOf((*MockIIODirectory)(nil).FindFiles))
}

// GetName mocks base method.
func (m *MockIIODirectory) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockIIODirectoryMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIIODirectory)(nil).GetName))
}

// GetParent mocks base method.
func (m *MockIIODirectory) GetParent() IIODirectory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParent")
	ret0, _ := ret[0].(IIODirectory)
	return ret0
}

// GetParent indicates an expected call of GetParent.
func (mr *MockIIODirectoryMockRecorder) GetParent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParent", reflect.TypeOf((*MockIIODirectory)(nil).GetParent))
}

// GetPath mocks base method.
func (m *MockIIODirectory) GetPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath.
func (mr *MockIIODirectoryMockRecorder) GetPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockIIODirectory)(nil).GetPath))
}

// IsExist mocks base method.
func (m *MockIIODirectory) IsExist() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExist indicates an expected call of IsExist.
func (mr *MockIIODirectoryMockRecorder) IsExist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockIIODirectory)(nil).IsExist))
}
