// Code generated by MockGen. DO NOT EDIT.
// Source: permission\contract\i-user-value-service.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	valuetype "github.com/ahl5esoft/go-skill/permission/model/enum/value-type"
	global "github.com/ahl5esoft/go-skill/permission/model/global"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserValueService is a mock of IUserValueService interface.
type MockIUserValueService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserValueServiceMockRecorder
}

// MockIUserValueServiceMockRecorder is the mock recorder for MockIUserValueService.
type MockIUserValueServiceMockRecorder struct {
	mock *MockIUserValueService
}

// NewMockIUserValueService creates a new mock instance.
func NewMockIUserValueService(ctrl *gomock.Controller) *MockIUserValueService {
	mock := &MockIUserValueService{ctrl: ctrl}
	mock.recorder = &MockIUserValueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserValueService) EXPECT() *MockIUserValueServiceMockRecorder {
	return m.recorder
}

// MustCheckConditions mocks base method.
func (m *MockIUserValueService) MustCheckConditions(arg0 []global.ValueCondition) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustCheckConditions", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MustCheckConditions indicates an expected call of MustCheckConditions.
func (mr *MockIUserValueServiceMockRecorder) MustCheckConditions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustCheckConditions", reflect.TypeOf((*MockIUserValueService)(nil).MustCheckConditions), arg0)
}

// MustGetCount mocks base method.
func (m *MockIUserValueService) MustGetCount(valueType valuetype.Value) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustGetCount", valueType)
	ret0, _ := ret[0].(int64)
	return ret0
}

// MustGetCount indicates an expected call of MustGetCount.
func (mr *MockIUserValueServiceMockRecorder) MustGetCount(valueType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustGetCount", reflect.TypeOf((*MockIUserValueService)(nil).MustGetCount), valueType)
}
